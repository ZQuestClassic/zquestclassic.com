{% extends "layouts/base.njk" %}

{% block header %}
<style>
	li {
		margin-bottom: 10px;
	}

	.release-header {
		display: flex;
		justify-content: space-between;
    	width: 100%;
		padding: 10px;
	}

	.release-navigation {
	}
	.release-meta {
		display: flex;
		flex-wrap: wrap;
		gap: 10px;
	}
	.release-meta {
	}

	.title {
		font-size: 2em;
	}
</style>

<div class="release-header">
	<div class="release-navigation">
		<span><a href="/releases">All Releases</a></span>
	
		{%- set previousRelease = collections.releases | getPreviousCollectionItem %}
		{%- set nextRelease = collections.releases | getNextCollectionItem %}
		{%- if nextRelease or previousRelease %}
		<span>| </span>
		{%- if previousRelease %}<span><a href="{{ previousRelease.url }}">{{ previousRelease.data.title }}</a> -> </span>{%
		endif %}
		<span>{{ title }}</span>
		{%- if nextRelease %}<span> -> <a href="{{ nextRelease.url }}">{{ nextRelease.data.title }}</a></span>{% endif %}
		{%- endif %}
	</div>

	<div class="release-meta">
		<div>
			<time datetime="{{ page.date | htmlDateString }}">{{ page.date | readableDate }}</time>
		</div>
		<a href="https://www.github.com/ZQuestClassic/ZQuestClassic/releases/tag/{{ tag_name }}" target="_blank">View on GitHub</a>
	</div>
</div>

{% endblock %}

{% block content %}

{# Fancy nav styles adapted from https://lab.hakim.se/progress-nav/ #}

<div class="nav-wrapper">
	<nav class="toc">
		<svg class="toc-marker hidden" width="200" height="200" xmlns="http://www.w3.org/2000/svg">
			<path stroke="#b3c115" stroke-width="3" fill="transparent" stroke-dasharray="0, 0, 0, 1000" stroke-linecap="round" stroke-linejoin="round" transform="translate(-0.5, -0.5)" />
		</svg>
	</nav>

	{# <div> #}
		<style>
			.assets {
				display: flex;
				flex-wrap: wrap;
				margin: 10px;
			}
	
			.download-asset {
				flex: 1;
				display: flex;
				align-items: center;
				justify-content: space-evenly;
				padding: 10px;
				margin: 10px;
				border: 2px solid black;
				border-radius: 25px;
				background-color: #423f56;
				text-decoration: none;
			}
			.download-asset:hover {
				background-color: #4d4964;
			}
			.download-asset.selected {
				border-color: hsl(65, 80%, 42%);
			}
	
			.download-asset img {
				width: 40px;
				height: 40px;
			}
			.download-asset .label {
				padding: 10px;
				text-align: center;
			}
		</style>
	
		
	
	
		<div class="content">
			<div class="title">{{ title }}</div>

			{%- if description %}
				<h2 data-exclude-nav>{{ description }}</h2>
			{%- endif %}
			
			<div class="assets">
				{% for asset in assets %}
					<a class="download-asset" alt="{{ asset.channel }}" data-channel="{{ asset.channel }}" href="{{ asset.url }}">
						{% if 'windows' in asset.channel %}
							<img src="/img/windows.svg">
						{% else %}
							<img src="/img/{{ asset.channel }}.svg">
						{% endif %}
						<div class="label">
							{% if asset.channel == 'windows-x64' %}
								<div>Windows</div>
								<div>64-bit</div>
							{% elif asset.channel == 'windows-win32' %}
								<div>Windows</div>
								<div>32-bit</div>
							{% else %}
								{{ asset.channel | capitalize }}
							{% endif %}
						</div>
					</a>
				{% endfor %}
			</div>
		
			<div>Downloads: <span class="download-count"></span></div>
		
			<script>
				const assets = Website.sortAssets({{ assets | json | safe }});
				const channel = Website.getChannel();
				let order = 0;
				for (const asset of assets) {
					const el = document.querySelector(`[data-channel="${asset.channel}"]`);
					el.style.order = order++;
					if (asset.channel === channel) el.classList.add('selected');
				}
		
				(async () => {
					const json = await Website.getReleaseInfo('{{ tag_name }}');
					let downloads = 0;
					for (const asset of json.assets) downloads += asset.download_count;
					document.querySelector('.download-count').textContent = downloads;
				})();
			</script>

			{{ content | safe }}
		</div>
	{# </div> #}
</div>

{% endblock %}
